<?php

namespace Jaxon\Response\Traits;

use Jaxon\Plugin\ResponsePlugin;
use Jaxon\Response\ResponseInterface;

use function array_filter;
use function array_map;
use function array_merge;
use function count;
use function is_array;
use function is_integer;
use function trim;

trait CommandTrait
{
    /**
     * The commands that will be sent to the browser in the response
     *
     * @var array
     */
    protected $aCommands = [];

    /**
     * Get the commands in the response
     *
     * @return array
     */
    public function getCommands(): array
    {
        return $this->aCommands;
    }

    /**
     * Get the number of commands in the response
     *
     * @return int
     */
    public function getCommandCount(): int
    {
        return count($this->aCommands);
    }

    /**
     * Clear all the commands already added to the response
     *
     * @return void
     */
    public function clearCommands()
    {
        $this->aCommands = [];
    }

    /**
     * Merge the commands with those in this <Response> object
     *
     * @param array $aCommands    The commands to merge
     * @param bool $bBefore    Add the new commands to the beginning of the list
     *
     * @return void
     */
    public function appendCommands(array $aCommands, bool $bBefore = false)
    {
        $this->aCommands = ($bBefore) ?
            array_merge($aCommands, $this->aCommands) :
            array_merge($this->aCommands, $aCommands);
    }

    /**
     * Merge the response commands with those in this <Response> object
     *
     * @param ResponseInterface $xResponse    The <Response> object
     * @param bool $bBefore    Add the new commands to the beginning of the list
     *
     * @return void
     */
    public function appendResponse(ResponseInterface $xResponse, bool $bBefore = false)
    {
        $this->appendCommands($xResponse->getCommands(), $bBefore);
    }

    /**
     * Add a response command to the array of commands that will be sent to the browser
     *
     * @param array $aAttributes    Associative array of attributes that will describe the command
     * @param mixed $mData    The data to be associated with this command
     *
     * @return ResponseInterface
     */
    public function addRawCommand(array $aAttributes, $mData): ResponseInterface
    {
        $aAttributes['data'] = $mData;
        $this->aCommands[] = $aAttributes;
        return $this;
    }

    /**
     * Add a response command to the array of commands that will be sent to the browser
     * Convert all attributes, excepted integers, to string.
     *
     * @param array $aAttributes    Associative array of attributes that will describe the command
     * @param mixed $mData    The data to be associated with this command
     *
     * @return ResponseInterface
     */
    public function addCommand(array $aAttributes, $mData): ResponseInterface
    {
        $aAttributes = array_map(function($xAttribute) {
            return is_integer($xAttribute) ? $xAttribute : trim((string)$xAttribute, " \t");
        }, $aAttributes);
        return $this->addRawCommand($aAttributes, $mData);
    }

    /**
     * Add a response command to the array of commands that will be sent to the browser
     *
     * @param string $sName    The command name
     * @param array $aAttributes    Associative array of attributes that will describe the command
     * @param mixed $mData    The data to be associated with this command
     * @param bool $bRemoveEmpty    If true, remove empty attributes
     *
     * @return ResponseInterface
     */
    protected function _addCommand(string $sName, array $aAttributes,
        $mData, bool $bRemoveEmpty = false): ResponseInterface
    {
        $mData = is_array($mData) ? array_map(function($sData) {
            return trim((string)$sData, " \t\n");
        }, $mData) : trim((string)$mData, " \t\n");
        if($bRemoveEmpty)
        {
            $aAttributes = array_filter($aAttributes, function($xValue) {
                return $xValue === '';
            });
        }
        $aAttributes['cmd'] = $sName;
        return $this->addCommand($aAttributes, $mData);
    }

    /**
     * Add a response command that is generated by a plugin
     *
     * @param ResponsePlugin $xPlugin    The plugin object
     * @param array $aAttributes    The attributes for this response command
     * @param mixed $mData    The data to be sent with this command
     *
     * @return ResponseInterface
     */
    public function addPluginCommand(ResponsePlugin $xPlugin, array $aAttributes, $mData): ResponseInterface
    {
        $aAttributes['plg'] = $xPlugin->getName();
        return $this->addCommand($aAttributes, $mData);
    }
}
