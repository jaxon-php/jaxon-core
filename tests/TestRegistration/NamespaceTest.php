<?php

namespace Jaxon\Tests\TestRegistration;

use Jaxon\App\Component\Pagination;
use Jaxon\Exception\SetupException;
use Jaxon\Jaxon;
use Jaxon\Plugin\Request\CallableClass\CallableClassPlugin;
use Jaxon\Plugin\Request\CallableClass\CallableObject;
use Jaxon\Plugin\Request\CallableDir\CallableDirPlugin;
use Jaxon\Tests\Ns\Ajax\ClassA;
use Jaxon\Tests\Ns\Ajax\ClassB;
use Jaxon\Tests\Ns\Ajax\ClassC;
use PHPUnit\Framework\TestCase;

use function strlen;

class NamespaceTest extends TestCase
{
    /**
     * @var CallableDirPlugin
     */
    protected $xDirPlugin;

    /**
     * @var CallableClassPlugin
     */
    protected $xClassPlugin;

    /**
     * @throws SetupException
     */
    public function setUp(): void
    {
        jaxon()->setOption('core.prefix.class', '');

        // This directory is already registered with the autoload.
        jaxon()->register(Jaxon::CALLABLE_DIR, __DIR__ . '/../src/Ns/Ajax',
            ['namespace' => "Jaxon\\Tests\\Ns\\Ajax", 'autoload' => false]);
        // This directory needs to be registered with the autoload.
        jaxon()->register(Jaxon::CALLABLE_DIR, __DIR__ . '/../src/dir_ns', "Jaxon\\NsTests");

        $this->xDirPlugin = jaxon()->di()->getCallableDirPlugin();
        $this->xClassPlugin = jaxon()->di()->getCallableClassPlugin();
    }

    /**
     * @throws SetupException
     */
    public function tearDown(): void
    {
        jaxon()->reset();
        parent::tearDown();
    }

    public function testPluginName()
    {
        $this->assertEquals(Jaxon::CALLABLE_DIR, $this->xDirPlugin->getName());
    }

    /**
     * @throws SetupException
     */
    public function testPaginationCallable()
    {
        $xPaginationCallable = $this->xClassPlugin->getCallable(Pagination::class);
        $this->assertEquals(CallableObject::class, get_class($xPaginationCallable));
        $this->assertTrue($xPaginationCallable->excluded());
    }

    /**
     * @throws SetupException
     */
    public function testCallableDirClasses()
    {
        $xClassACallable = $this->xClassPlugin->getCallable(ClassA::class);
        $xClassBCallable = $this->xClassPlugin->getCallable(ClassB::class);
        $xClassCCallable = $this->xClassPlugin->getCallable(ClassC::class);
        // Test callables classes
        $this->assertEquals(CallableObject::class, get_class($xClassACallable));
        $this->assertEquals(CallableObject::class, get_class($xClassBCallable));
        $this->assertEquals(CallableObject::class, get_class($xClassCCallable));
        // Check methods
        $this->assertTrue($xClassACallable->hasMethod('methodAa'));
        $this->assertTrue($xClassACallable->hasMethod('methodAb'));
        $this->assertFalse($xClassACallable->hasMethod('methodAc'));
    }

    /**
     * @throws SetupException
     */
    public function testCallableDirJsCode()
    {
        // The js is generated by the CallableClass plugin
        // $this->assertEquals('a345cf8862e7ce14752fba0e789adc1c', $this->xClassPlugin->getHash());
        $this->assertEquals(32, strlen($this->xClassPlugin->getHash()));
        $sJsCode = $this->xClassPlugin->getScript();
        // file_put_contents(__DIR__ . '/../src/js/nss.js', $sJsCode);
        $this->assertEquals(file_get_contents(__DIR__ . '/../src/js/nss.js'), $sJsCode);
    }

    /**
     * @throws SetupException
     */
    public function testRegisterWithIncorrectSeparator()
    {
        // Overwrite the first registration
        jaxon()->register(Jaxon::CALLABLE_DIR, __DIR__ . '/../src/dir_ns',
            ['namespace' => "Jaxon\\NsTests", 'separator' => ':']);
        // The js is generated by the CallableClass plugin
        // $this->assertEquals('a345cf8862e7ce14752fba0e789adc1c', $this->xClassPlugin->getHash());
        $this->assertEquals(32, strlen($this->xClassPlugin->getHash()));
        $sJsCode = $this->xClassPlugin->getScript();
        // file_put_contents(__DIR__ . '/../src/js/nsi.js', $sJsCode);
        $this->assertEquals(file_get_contents(__DIR__ . '/../src/js/nsi.js'), $sJsCode);
    }

    /**
     * @throws SetupException
     */
    public function testRegisterWithUnderscoreAsSeparator()
    {
        //!! Actually this test fails because the feature is not implemented.
        //!! The library can't generate js code using the underscore as separator in namespaces.
        // Overwrite the first registration
        jaxon()->register(Jaxon::CALLABLE_DIR, __DIR__ . '/../src/dir_ns',
            ['namespace' => "Jaxon\\NsTests", 'separator' => '_']);
        // The js is generated by the CallableClass plugin
        // $this->assertEquals('a345cf8862e7ce14752fba0e789adc1c', $this->xClassPlugin->getHash());
        $this->assertEquals(32, strlen($this->xClassPlugin->getHash()));
        $sJsCode = $this->xClassPlugin->getScript();
        // file_put_contents(__DIR__ . '/../src/js/nsu.js', $sJsCode);
        $this->assertEquals(file_get_contents(__DIR__ . '/../src/js/nsu.js'), $sJsCode);

        $xCallable = $this->xClassPlugin->getCallable('Jaxon_Tests_Ns_Ajax_ClassA');
        $this->assertEquals(CallableObject::class, get_class($xCallable));
    }

    public function testClassNotFound()
    {
        // No callable for standard PHP functions.
        $this->expectException(SetupException::class);
        $this->xDirPlugin->getCallable('Simple');
    }
}
